<#@ template language="C#v3.5" #>
// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace Marosoft.Mist.Lexing
{
    public static class Tokens
    {
<#= tokenConstants() #>

		public static readonly Dictionary<int, string> TokenNames = new Dictionary<int, string>
        {
<#= tokenNamePairs() #>        
        };
                
        public static readonly List<TokenRecognizer> All = new List<TokenRecognizer>
        {
<#= tokenRecognizers() #>
        };
    }
}
<#+	

	// **********************************************************************
	// The IMPORTANT STUFF is here - the list of tokens
	// used by this template to generate the Tokens class.
	// **********************************************************************

	TokenInfo[] tokens = new TokenInfo[]{
		new TokenInfo { token = "EOF" }, 
		new TokenInfo { token = "WS",         regex = "^([ \\t\\r\\n])+", dont_include = true }, 
		new TokenInfo { token = "SYMBOL" ,    regex = "^([a-zA-Z])+([\\w\\-])*"},		
		new TokenInfo { token = "COMMENT" ,   regex = "^;[^\\r\\n]*", dont_include = true }, 		
		new TokenInfo { token = "INT" ,       regex = "^(-)?(\\d)+"},
		new TokenInfo { token = "STRING" ,    regex = "^\"[^\"]*\""},
		new TokenInfo { token = "LEFTPAREN" , regex = "^\\("},
		new TokenInfo { token = "RIGHTPAREN" , regex = "^\\)"},
		new TokenInfo { token = "LIST" }
	};

	class TokenInfo 
	{
		public string token {get;set;}
		public string regex {get;set;}
		public bool dont_include {get;set;}	 
	}
		
	string tokenConstants()
	{
		int i = -1;
		string buffer = string.Empty;
		foreach(var t in tokens)
		{
			buffer += "\t\tpublic const int " + t.token + " = " + i + ";\r\n";
			i++;
		}
		return buffer;
	}
	
	string tokenNamePairs()
	{
		string buffer = "";
		foreach(var t in tokens)
		{
			buffer += "\t\t\t{" + t.token + ", \"" + t.token + "\"},\r\n";
		}
		return buffer;
	}
	
	string tokenRecognizers()
	{
		string buffer = "";
		foreach(var t in tokens)
		{
			if(string.IsNullOrEmpty(t.regex)) continue;
			buffer += string.Format("\t\t\tnew TokenRecognizer({0}, \"{1}\", {2}),\r\n",
				t.token,
				t.regex.Replace("\r", "\\r").Replace("\n", "\\n").Replace("\\", "\\\\").Replace("\"", "\\\""),
				t.dont_include ? "false" : "true");
		}
		return buffer;
	}
#>