
; This file contains the core part of Mist that's actually 
; implemented in Mist itself.

(defmacro if (test then else)
	(list (quote cond)
		test then
		true else))

; TODO: Enhance to use implicit DO when variable length arguments		
(defmacro when (test then)
	(list (quote cond)
		test then))

; TODO: Enhance to use implicit DO when variable length arguments
(defmacro unless (test then)
	(list (quote cond)
		test nil
		true then))

; TODO: Enhance when variable length arguments
(defmacro defun (name args body)
	(list (quote def) 
	      name 
		  (list (quote fn) args body)))

; TODO: enhance when more options available:
; - variable length arguments
; - quasiquoting
(defmacro and (x y)
	(list (quote if) x
		(list (quote if) y
			(quote true)
			(quote false))
		(quote false)))

(def select map)			; Alias for Linq lovers
(def where filter)			; Alias for Linq lovers
(def aggregate reduce)		; Alias for Linq lovers
(def inject reduce)			; Alias for Ruby lovers
(def fold reduce)			; Alias for FP lovers
(def order-by sort-by)		; Alias for Linq lovers

; TODO: CHANGE USE OF DEF TO DEFINE FUNCTIONS INTO DEFUN WHEN OPTIONAL ARGUMENTS BECOME AVAILABLE..
; IT WORKS NOW, BUT NOT IF I WANT DOC STRINGS

(def inc "Returns a number one greater than num." (fn (x) (+ x 1)))
(def dec "Returns a number one less than num." (fn (x) (- x 1)))

(def zero? "Returns true if num is zero, else false" (fn (x) (= x 0)))

(defun identity (x) x) 

(defun sum (lst)
	(apply + lst))

;(defun push! (x lst)
;	(set! lst (concat lst x)))